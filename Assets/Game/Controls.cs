//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Game/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Play"",
            ""id"": ""3a41cb0c-7d0d-46d6-8c90-490ed351d447"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a36382e3-4e6b-42ce-9874-2f89c7502b3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""d2c5a1da-e74e-42f6-a187-07c82b811232"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Character"",
                    ""type"": ""Button"",
                    ""id"": ""eaebe3a6-34d7-4607-83cd-7ddccbe07ab0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kitchen"",
                    ""type"": ""Button"",
                    ""id"": ""e3b47d0f-85f4-46b7-9482-9a5331e89ceb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cb94026-b85a-4479-949d-e67d59070b2f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7e2c634-70b1-41dc-b7f8-f698e503234e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""407a894a-fe12-4ac1-b2a8-2d7190926613"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Character"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ed6e4e6-a644-4a5e-90ef-1a02b0e4a965"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kitchen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Play
        m_Play = asset.FindActionMap("Play", throwIfNotFound: true);
        m_Play_Select = m_Play.FindAction("Select", throwIfNotFound: true);
        m_Play_Cancel = m_Play.FindAction("Cancel", throwIfNotFound: true);
        m_Play_Character = m_Play.FindAction("Character", throwIfNotFound: true);
        m_Play_Kitchen = m_Play.FindAction("Kitchen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Play
    private readonly InputActionMap m_Play;
    private IPlayActions m_PlayActionsCallbackInterface;
    private readonly InputAction m_Play_Select;
    private readonly InputAction m_Play_Cancel;
    private readonly InputAction m_Play_Character;
    private readonly InputAction m_Play_Kitchen;
    public struct PlayActions
    {
        private @Controls m_Wrapper;
        public PlayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Play_Select;
        public InputAction @Cancel => m_Wrapper.m_Play_Cancel;
        public InputAction @Character => m_Wrapper.m_Play_Character;
        public InputAction @Kitchen => m_Wrapper.m_Play_Kitchen;
        public InputActionMap Get() { return m_Wrapper.m_Play; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayActions set) { return set.Get(); }
        public void SetCallbacks(IPlayActions instance)
        {
            if (m_Wrapper.m_PlayActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_PlayActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PlayActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PlayActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_PlayActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_PlayActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_PlayActionsCallbackInterface.OnCancel;
                @Character.started -= m_Wrapper.m_PlayActionsCallbackInterface.OnCharacter;
                @Character.performed -= m_Wrapper.m_PlayActionsCallbackInterface.OnCharacter;
                @Character.canceled -= m_Wrapper.m_PlayActionsCallbackInterface.OnCharacter;
                @Kitchen.started -= m_Wrapper.m_PlayActionsCallbackInterface.OnKitchen;
                @Kitchen.performed -= m_Wrapper.m_PlayActionsCallbackInterface.OnKitchen;
                @Kitchen.canceled -= m_Wrapper.m_PlayActionsCallbackInterface.OnKitchen;
            }
            m_Wrapper.m_PlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Character.started += instance.OnCharacter;
                @Character.performed += instance.OnCharacter;
                @Character.canceled += instance.OnCharacter;
                @Kitchen.started += instance.OnKitchen;
                @Kitchen.performed += instance.OnKitchen;
                @Kitchen.canceled += instance.OnKitchen;
            }
        }
    }
    public PlayActions @Play => new PlayActions(this);
    public interface IPlayActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnCharacter(InputAction.CallbackContext context);
        void OnKitchen(InputAction.CallbackContext context);
    }
}
